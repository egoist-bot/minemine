(window.webpackJsonp=window.webpackJsonp||[]).push([[1],{202:function(s,a,n){"use strict";n.r(a);var t=function(){var s=this,a=s.$createElement,n=s._self._c||a;return n("layout-manager",{attrs:{page:s.$page}},[n("div",{staticClass:"markdown-body is-component"},[n("p",[s._v("标签： git")]),s._v(" "),n("p",[s._v("查看 git 配置信息")]),s._v(" "),n("div",{pre:!0,attrs:{class:"pre-wrapper","data-lang":"git"}},[n("pre",{attrs:{class:"language-git"}},[n("code",{attrs:{class:"language-git"}},[n("span",{attrs:{class:"token command"}},[s._v("$ git config"),n("span",{attrs:{class:"token parameter"}},[s._v(" --list")])]),s._v("\nor\n"),n("span",{attrs:{class:"token command"}},[s._v("$ git config"),n("span",{attrs:{class:"token parameter"}},[s._v(" -l")])])])])]),n("p",[s._v("设置 git 配置信息 ")]),s._v(" "),n("ul",[n("li",[s._v("全局设置")])]),s._v(" "),n("div",{pre:!0,attrs:{class:"pre-wrapper","data-lang":"shell"}},[n("pre",{attrs:{class:"language-shell"}},[n("code",{attrs:{class:"language-shell"}},[s._v("$ "),n("span",{attrs:{class:"token function"}},[s._v("git")]),s._v(" config --global user.name "),n("span",{attrs:{class:"token string"}},[s._v('"{{userName}}"')]),s._v("\n$ "),n("span",{attrs:{class:"token function"}},[s._v("git")]),s._v(" config --global user.email "),n("span",{attrs:{class:"token string"}},[s._v('"{{userEmail}}"')])])])]),n("ul",[n("li",[s._v("修改当前项目的 git 配置信息")])]),s._v(" "),n("div",{pre:!0,attrs:{class:"pre-wrapper","data-lang":"shell"}},[n("pre",{attrs:{class:"language-shell"}},[n("code",{attrs:{class:"language-shell"}},[s._v("$ "),n("span",{attrs:{class:"token function"}},[s._v("ls")]),s._v(" -a\n$ "),n("span",{attrs:{class:"token function"}},[s._v("cd")]),s._v(" .git/\n$ "),n("span",{attrs:{class:"token function"}},[s._v("vi")]),s._v(" config\nadd\n"),n("span",{attrs:{class:"token punctuation"}},[s._v("[")]),s._v("user"),n("span",{attrs:{class:"token punctuation"}},[s._v("]")]),s._v("\n   name "),n("span",{attrs:{class:"token operator"}},[s._v("=")]),s._v(" "),n("span",{attrs:{class:"token punctuation"}},[s._v("{")]),n("span",{attrs:{class:"token punctuation"}},[s._v("{")]),s._v("userName"),n("span",{attrs:{class:"token punctuation"}},[s._v("}")]),n("span",{attrs:{class:"token punctuation"}},[s._v("}")]),s._v("\n   email "),n("span",{attrs:{class:"token operator"}},[s._v("=")]),s._v(" "),n("span",{attrs:{class:"token punctuation"}},[s._v("{")]),n("span",{attrs:{class:"token punctuation"}},[s._v("{")]),s._v("userEmail"),n("span",{attrs:{class:"token punctuation"}},[s._v("}")]),n("span",{attrs:{class:"token punctuation"}},[s._v("}")]),s._v("\n\nor\n$ "),n("span",{attrs:{class:"token function"}},[s._v("git")]),s._v(" config user.name "),n("span",{attrs:{class:"token string"}},[s._v('"{{userName}}"')]),s._v("\n$ "),n("span",{attrs:{class:"token function"}},[s._v("git")]),s._v(" config user.email "),n("span",{attrs:{class:"token string"}},[s._v('"{{userEmail}}"')])])])]),n("p",[s._v("查看分支")]),s._v(" "),n("div",{pre:!0,attrs:{class:"pre-wrapper","data-lang":"shell"}},[n("pre",{attrs:{class:"language-shell"}},[n("code",{attrs:{class:"language-shell"}},[s._v("$ "),n("span",{attrs:{class:"token function"}},[s._v("git")]),s._v(" branch 查看本地分支\n$ "),n("span",{attrs:{class:"token function"}},[s._v("git")]),s._v(" branch -r 查看远程分支\n$ "),n("span",{attrs:{class:"token function"}},[s._v("git")]),s._v(" branch -a 查看所有分支")])])]),n("p",[s._v("创建一个新分支")]),s._v(" "),n("div",{pre:!0,attrs:{class:"pre-wrapper","data-lang":"shell"}},[n("pre",{attrs:{class:"language-shell"}},[n("code",{attrs:{class:"language-shell"}},[s._v("$ "),n("span",{attrs:{class:"token function"}},[s._v("git")]),s._v(" checkout -b "),n("span",{attrs:{class:"token punctuation"}},[s._v("{")]),n("span",{attrs:{class:"token punctuation"}},[s._v("{")]),s._v("branch"),n("span",{attrs:{class:"token punctuation"}},[s._v("}")]),n("span",{attrs:{class:"token punctuation"}},[s._v("}")])])])]),n("p",[s._v("切换分支")]),s._v(" "),n("div",{pre:!0,attrs:{class:"pre-wrapper","data-lang":"shell"}},[n("pre",{attrs:{class:"language-shell"}},[n("code",{attrs:{class:"language-shell"}},[s._v("$ "),n("span",{attrs:{class:"token function"}},[s._v("git")]),s._v(" checkout "),n("span",{attrs:{class:"token punctuation"}},[s._v("{")]),n("span",{attrs:{class:"token punctuation"}},[s._v("{")]),s._v("branch"),n("span",{attrs:{class:"token punctuation"}},[s._v("}")]),n("span",{attrs:{class:"token punctuation"}},[s._v("}")]),s._v("\n\n$ "),n("span",{attrs:{class:"token function"}},[s._v("git")]),s._v(" checkout -b "),n("span",{attrs:{class:"token punctuation"}},[s._v("{")]),n("span",{attrs:{class:"token punctuation"}},[s._v("{")]),s._v("remoteBranch"),n("span",{attrs:{class:"token punctuation"}},[s._v("}")]),n("span",{attrs:{class:"token punctuation"}},[s._v("}")]),s._v(" origin/"),n("span",{attrs:{class:"token punctuation"}},[s._v("{")]),n("span",{attrs:{class:"token punctuation"}},[s._v("{")]),s._v("remoteBranch"),n("span",{attrs:{class:"token punctuation"}},[s._v("}")]),n("span",{attrs:{class:"token punctuation"}},[s._v("}")])])])]),n("p",[s._v("删除分支")]),s._v(" "),n("div",{pre:!0,attrs:{class:"pre-wrapper","data-lang":"shell"}},[n("pre",{attrs:{class:"language-shell"}},[n("code",{attrs:{class:"language-shell"}},[s._v("$ "),n("span",{attrs:{class:"token function"}},[s._v("git")]),s._v(" branch -D "),n("span",{attrs:{class:"token punctuation"}},[s._v("{")]),n("span",{attrs:{class:"token punctuation"}},[s._v("{")]),s._v("loaclBranch"),n("span",{attrs:{class:"token punctuation"}},[s._v("}")]),n("span",{attrs:{class:"token punctuation"}},[s._v("}")]),s._v("\n$ "),n("span",{attrs:{class:"token function"}},[s._v("git")]),s._v(" push --delete origin "),n("span",{attrs:{class:"token punctuation"}},[s._v("{")]),n("span",{attrs:{class:"token punctuation"}},[s._v("{")]),s._v("remoteBranch"),n("span",{attrs:{class:"token punctuation"}},[s._v("}")]),n("span",{attrs:{class:"token punctuation"}},[s._v("}")])])])]),n("p",[s._v("合并分支")]),s._v(" "),n("div",{pre:!0,attrs:{class:"pre-wrapper","data-lang":""}},[n("pre",{attrs:{class:""}},[n("code",{attrs:{class:""}},[s._v("$ git merge {{branch}} 将 branch 与当前分支合并")])])]),n("p",[s._v("储藏修改")]),s._v(" "),n("div",{pre:!0,attrs:{class:"pre-wrapper","data-lang":"shell"}},[n("pre",{attrs:{class:"language-shell"}},[n("code",{attrs:{class:"language-shell"}},[s._v("$ "),n("span",{attrs:{class:"token function"}},[s._v("git")]),s._v(" stash 当你想切换到其他分支又不想提交现在修改的东西时，当你在修改好前想 "),n("span",{attrs:{class:"token function"}},[s._v("git")]),s._v(" pull 时，用 "),n("span",{attrs:{class:"token function"}},[s._v("git")]),s._v(" stash 来得到一个干净的工作目录\n\n$ "),n("span",{attrs:{class:"token function"}},[s._v("git")]),s._v(" stash save "),n("span",{attrs:{class:"token string"}},[s._v("''")]),s._v(" 给你的 stash 取个名字\n\n$ "),n("span",{attrs:{class:"token function"}},[s._v("git")]),s._v(" stash pop 重新应用储藏内容\n\n$ "),n("span",{attrs:{class:"token function"}},[s._v("git")]),s._v(" stash list 查看现有储藏列表\n\n$ "),n("span",{attrs:{class:"token function"}},[s._v("git")]),s._v(" stash apply stash@"),n("span",{attrs:{class:"token punctuation"}},[s._v("{")]),s._v("number"),n("span",{attrs:{class:"token punctuation"}},[s._v("}")]),s._v(" 应用某次储藏，但未从栈上移除，需继续 "),n("span",{attrs:{class:"token function"}},[s._v("git")]),s._v(" stash drop stash@"),n("span",{attrs:{class:"token punctuation"}},[s._v("{")]),s._v("number"),n("span",{attrs:{class:"token punctuation"}},[s._v("}")]),s._v(" "),n("span",{attrs:{class:"token punctuation"}},[s._v("(")]),s._v("I like pop"),n("span",{attrs:{class:"token operator"}},[s._v("!")])])])]),n("p",[s._v("查看提交历史")]),s._v(" "),n("div",{pre:!0,attrs:{class:"pre-wrapper","data-lang":"shell"}},[n("pre",{attrs:{class:"language-shell"}},[n("code",{attrs:{class:"language-shell"}},[s._v("$ "),n("span",{attrs:{class:"token function"}},[s._v("git")]),s._v(" log\n\n$ "),n("span",{attrs:{class:"token function"}},[s._v("git")]),s._v(" log -p  查看每次提交的内容差异\n\n$ "),n("span",{attrs:{class:"token function"}},[s._v("git")]),s._v(" log -p -2 显示最近的两次更新")])])]),n("p",[s._v("查看 commit head message")]),s._v(" "),n("div",{pre:!0,attrs:{class:"pre-wrapper","data-lang":"shell"}},[n("pre",{attrs:{class:"language-shell"}},[n("code",{attrs:{class:"language-shell"}},[s._v("$ "),n("span",{attrs:{class:"token function"}},[s._v("git")]),s._v(" reflog")])])]),n("p",[s._v("打 tag")]),s._v(" "),n("div",{pre:!0,attrs:{class:"pre-wrapper","data-lang":"shell"}},[n("pre",{attrs:{class:"language-shell"}},[n("code",{attrs:{class:"language-shell"}},[s._v("$ "),n("span",{attrs:{class:"token function"}},[s._v("git")]),s._v(" tag "),n("span",{attrs:{class:"token punctuation"}},[s._v("{")]),n("span",{attrs:{class:"token punctuation"}},[s._v("{")]),s._v("tagName"),n("span",{attrs:{class:"token punctuation"}},[s._v("}")]),n("span",{attrs:{class:"token punctuation"}},[s._v("}")]),s._v("\n$ "),n("span",{attrs:{class:"token function"}},[s._v("git")]),s._v(" push origin "),n("span",{attrs:{class:"token punctuation"}},[s._v("{")]),n("span",{attrs:{class:"token punctuation"}},[s._v("{")]),s._v("tagName"),n("span",{attrs:{class:"token punctuation"}},[s._v("}")]),n("span",{attrs:{class:"token punctuation"}},[s._v("}")]),s._v("\nor\n$ "),n("span",{attrs:{class:"token function"}},[s._v("git")]),s._v(" push --tags")])])]),n("p",[s._v("删除 tag")]),s._v(" "),n("div",{pre:!0,attrs:{class:"pre-wrapper","data-lang":"shell"}},[n("pre",{attrs:{class:"language-shell"}},[n("code",{attrs:{class:"language-shell"}},[s._v("$ "),n("span",{attrs:{class:"token function"}},[s._v("git")]),s._v(" tag -d "),n("span",{attrs:{class:"token punctuation"}},[s._v("{")]),n("span",{attrs:{class:"token punctuation"}},[s._v("{")]),s._v("localTag"),n("span",{attrs:{class:"token punctuation"}},[s._v("}")]),n("span",{attrs:{class:"token punctuation"}},[s._v("}")]),s._v("\n\n$ "),n("span",{attrs:{class:"token function"}},[s._v("git")]),s._v(" tag -d "),n("span",{attrs:{class:"token punctuation"}},[s._v("{")]),n("span",{attrs:{class:"token punctuation"}},[s._v("{")]),s._v("remoteTag"),n("span",{attrs:{class:"token punctuation"}},[s._v("}")]),n("span",{attrs:{class:"token punctuation"}},[s._v("}")]),s._v("\n$ "),n("span",{attrs:{class:"token function"}},[s._v("git")]),s._v(" push origin :refs/tags/"),n("span",{attrs:{class:"token punctuation"}},[s._v("{")]),n("span",{attrs:{class:"token punctuation"}},[s._v("{")]),s._v("remoteTag"),n("span",{attrs:{class:"token punctuation"}},[s._v("}")]),n("span",{attrs:{class:"token punctuation"}},[s._v("}")])])])]),n("p",[s._v("给一个历史提交添加 tag")]),s._v(" "),n("div",{pre:!0,attrs:{class:"pre-wrapper","data-lang":"shell"}},[n("pre",{attrs:{class:"language-shell"}},[n("code",{attrs:{class:"language-shell"}},[s._v("// Set the HEAD to the old commit that we want to tag\n$ "),n("span",{attrs:{class:"token function"}},[s._v("git")]),s._v(" checkout "),n("span",{attrs:{class:"token punctuation"}},[s._v("{")]),n("span",{attrs:{class:"token punctuation"}},[s._v("{")]),s._v("leading 7 chars of commit"),n("span",{attrs:{class:"token punctuation"}},[s._v("}")]),n("span",{attrs:{class:"token punctuation"}},[s._v("}")]),s._v("\n\n// temporarily "),n("span",{attrs:{class:"token keyword"}},[s._v("set")]),s._v(" the "),n("span",{attrs:{class:"token function"}},[s._v("date")]),s._v(" to the "),n("span",{attrs:{class:"token function"}},[s._v("date")]),s._v(" of the HEAD commit, and add the tag\n$ GIT_COMMITTER_DATE"),n("span",{attrs:{class:"token operator"}},[s._v("=")]),n("span",{attrs:{class:"token string"}},[s._v('"'),n("span",{attrs:{class:"token variable"}},[n("span",{attrs:{class:"token variable"}},[s._v("$(")]),n("span",{attrs:{class:"token function"}},[s._v("git")]),s._v(" show --format"),n("span",{attrs:{class:"token operator"}},[s._v("=")]),s._v("%aD "),n("span",{attrs:{class:"token operator"}},[s._v("|")]),s._v(" "),n("span",{attrs:{class:"token function"}},[s._v("head")]),s._v(" -1"),n("span",{attrs:{class:"token variable"}},[s._v(")")])]),s._v('"')]),s._v(" "),n("span",{attrs:{class:"token function"}},[s._v("git")]),s._v(" tag -a "),n("span",{attrs:{class:"token punctuation"}},[s._v("{")]),n("span",{attrs:{class:"token punctuation"}},[s._v("{")]),s._v("tag"),n("span",{attrs:{class:"token punctuation"}},[s._v("}")]),n("span",{attrs:{class:"token punctuation"}},[s._v("}")]),s._v(" -m "),n("span",{attrs:{class:"token string"}},[s._v('"{{commit message}}"')]),s._v("\n\n// "),n("span",{attrs:{class:"token keyword"}},[s._v("set")]),s._v(" HEAD back to whatever you want it to be\n$ "),n("span",{attrs:{class:"token function"}},[s._v("git")]),s._v(" checkout master\n\n$ "),n("span",{attrs:{class:"token function"}},[s._v("git")]),s._v(" push --tags")])])]),n("p",[s._v("push 后发现没加 .gitignore，删除本地及远程的冗余提交")]),s._v(" "),n("div",{pre:!0,attrs:{class:"pre-wrapper","data-lang":"shell"}},[n("pre",{attrs:{class:"language-shell"}},[n("code",{attrs:{class:"language-shell"}},[s._v("$ "),n("span",{attrs:{class:"token function"}},[s._v("git")]),s._v(" "),n("span",{attrs:{class:"token function"}},[s._v("rm")]),s._v(" -r --cached "),n("span",{attrs:{class:"token keyword"}},[s._v(".")]),s._v("\n$ "),n("span",{attrs:{class:"token function"}},[s._v("git")]),s._v(" add "),n("span",{attrs:{class:"token keyword"}},[s._v(".")]),s._v("\n$ "),n("span",{attrs:{class:"token function"}},[s._v("git")]),s._v(" commit -m "),n("span",{attrs:{class:"token string"}},[s._v('"{{commit message}}"')]),s._v("\n$ "),n("span",{attrs:{class:"token function"}},[s._v("git")]),s._v(" push")])])]),n("p",[s._v("修改已经 commit 的邮箱和用户名")]),s._v(" "),n("div",{pre:!0,attrs:{class:"pre-wrapper","data-lang":"shell"}},[n("pre",{attrs:{class:"language-shell"}},[n("code",{attrs:{class:"language-shell"}},[s._v("// get the commit we want to modify\n$ "),n("span",{attrs:{class:"token function"}},[s._v("git")]),s._v(" log\n\n// go to the commit\n$ "),n("span",{attrs:{class:"token function"}},[s._v("git")]),s._v(" reset --soft "),n("span",{attrs:{class:"token punctuation"}},[s._v("{")]),n("span",{attrs:{class:"token punctuation"}},[s._v("{")]),s._v("commitId"),n("span",{attrs:{class:"token punctuation"}},[s._v("}")]),n("span",{attrs:{class:"token punctuation"}},[s._v("}")]),s._v("\n\n$ "),n("span",{attrs:{class:"token function"}},[s._v("git")]),s._v(" commit --amend --author"),n("span",{attrs:{class:"token operator"}},[s._v("=")]),n("span",{attrs:{class:"token string"}},[s._v("'{{userName}}<{{userEmail}}>'")]),s._v("\n$ "),n("span",{attrs:{class:"token function"}},[s._v("git")]),s._v(" push")])])]),n("p",[s._v("修改已经 push 的 commit 的邮箱和用户名")]),s._v(" "),n("div",{pre:!0,attrs:{class:"pre-wrapper","data-lang":"shell"}},[n("pre",{attrs:{class:"language-shell"}},[n("code",{attrs:{class:"language-shell"}},[s._v("// clone a new repo\n"),n("span",{attrs:{class:"token function"}},[s._v("git")]),s._v(" clone --bare https://github.com/user/repo.git\n"),n("span",{attrs:{class:"token function"}},[s._v("cd")]),s._v(" repo.git")])])]),n("div",{pre:!0,attrs:{class:"pre-wrapper","data-lang":"shell"}},[n("pre",{attrs:{class:"language-shell"}},[n("code",{attrs:{class:"language-shell"}},[s._v("// copy the script below and modify the variables: OLD_EMAIL, CORRECT_NAME, CORRECT_EMAIL\n\n"),n("span",{attrs:{class:"token comment"}},[s._v("#! /bin/sh")]),s._v("\n\n"),n("span",{attrs:{class:"token function"}},[s._v("git")]),s._v(" filter-branch --env-filter "),n("span",{attrs:{class:"token string"}},[s._v('\'\n\nOLD_EMAIL=""\nCORRECT_NAME="Your Correct Name"\nCORRECT_EMAIL="your-correct-email@example.com"\n\nif [ "'),n("span",{attrs:{class:"token variable"}},[s._v("$GIT_COMMITTER_EMAIL")]),s._v('" = "'),n("span",{attrs:{class:"token variable"}},[s._v("$OLD_EMAIL")]),s._v('" ]\nthen\n    export GIT_COMMITTER_NAME="'),n("span",{attrs:{class:"token variable"}},[s._v("$CORRECT_NAME")]),s._v('"\n    export GIT_COMMITTER_EMAIL="'),n("span",{attrs:{class:"token variable"}},[s._v("$CORRECT_EMAIL")]),s._v('"\nfi\nif [ "'),n("span",{attrs:{class:"token variable"}},[s._v("$GIT_AUTHOR_EMAIL")]),s._v('" = "'),n("span",{attrs:{class:"token variable"}},[s._v("$OLD_EMAIL")]),s._v('" ]\nthen\n    export GIT_AUTHOR_NAME="'),n("span",{attrs:{class:"token variable"}},[s._v("$CORRECT_NAME")]),s._v('"\n    export GIT_AUTHOR_EMAIL="'),n("span",{attrs:{class:"token variable"}},[s._v("$CORRECT_EMAIL")]),s._v("\"\nfi\n'")]),s._v(" --tag-name-filter "),n("span",{attrs:{class:"token function"}},[s._v("cat")]),s._v(" -- --branches --tags")])])]),n("div",{pre:!0,attrs:{class:"pre-wrapper","data-lang":"shell"}},[n("pre",{attrs:{class:"language-shell"}},[n("code",{attrs:{class:"language-shell"}},[s._v("// "),n("span",{attrs:{class:"token keyword"}},[s._v("then")]),s._v(" press enter to run the script\n\n// checkout "),n("span",{attrs:{class:"token keyword"}},[s._v("if")]),s._v(" there any error "),n("span",{attrs:{class:"token keyword"}},[s._v("in")]),s._v(" new "),n("span",{attrs:{class:"token function"}},[s._v("git")]),s._v(" and push\n$ "),n("span",{attrs:{class:"token function"}},[s._v("git")]),s._v(" push --force --tags origin "),n("span",{attrs:{class:"token string"}},[s._v("'refs/heads/*'")]),s._v("\n\n// delete the temporary clone\n$ "),n("span",{attrs:{class:"token function"}},[s._v("cd")]),s._v(" "),n("span",{attrs:{class:"token punctuation"}},[s._v("..")]),s._v("\n$ "),n("span",{attrs:{class:"token function"}},[s._v("rm")]),s._v(" -rf repo.git")])])]),n("p",[s._v("修改已经 push 的 commit message")]),s._v(" "),n("div",{pre:!0,attrs:{class:"pre-wrapper","data-lang":"shell"}},[n("pre",{attrs:{class:"language-shell"}},[n("code",{attrs:{class:"language-shell"}},[s._v("方法一:\n$ "),n("span",{attrs:{class:"token function"}},[s._v("git")]),s._v(" commit --amend\n$ "),n("span",{attrs:{class:"token function"}},[s._v("git")]),s._v(" push --force\n\n方法二:\n$ "),n("span",{attrs:{class:"token function"}},[s._v("git")]),s._v(" rebase -i HEAD~n\n\nchange the "),n("span",{attrs:{class:"token variable"}},[n("span",{attrs:{class:"token variable"}},[s._v("`")]),s._v("pick"),n("span",{attrs:{class:"token variable"}},[s._v("`")])]),s._v(" to "),n("span",{attrs:{class:"token variable"}},[n("span",{attrs:{class:"token variable"}},[s._v("`")]),s._v("reword"),n("span",{attrs:{class:"token variable"}},[s._v("`")])]),s._v(", "),n("span",{attrs:{class:"token function"}},[s._v("which")]),s._v(" means edit the commit message\n\nsave and "),n("span",{attrs:{class:"token keyword"}},[s._v("exit")]),s._v(" and "),n("span",{attrs:{class:"token keyword"}},[s._v("then")]),s._v(" update the commit message as you like and :wq\n\n$ "),n("span",{attrs:{class:"token function"}},[s._v("git")]),s._v(" push --f")])])]),n("p",[s._v("修改已经 push 的提交内容")]),s._v(" "),n("div",{pre:!0,attrs:{class:"pre-wrapper","data-lang":"shell"}},[n("pre",{attrs:{class:"language-shell"}},[n("code",{attrs:{class:"language-shell"}},[n("span",{attrs:{class:"token function"}},[s._v("git")]),s._v(" reset --hard "),n("span",{attrs:{class:"token punctuation"}},[s._v("{")]),n("span",{attrs:{class:"token punctuation"}},[s._v("{")]),s._v("commitId"),n("span",{attrs:{class:"token punctuation"}},[s._v("}")]),n("span",{attrs:{class:"token punctuation"}},[s._v("}")]),s._v("\n\n"),n("span",{attrs:{class:"token function"}},[s._v("git")]),s._v(" add "),n("span",{attrs:{class:"token keyword"}},[s._v(".")]),s._v("\n\n"),n("span",{attrs:{class:"token function"}},[s._v("git")]),s._v(" commit --amend\n\n"),n("span",{attrs:{class:"token function"}},[s._v("git")]),s._v(" push origin HEAD --force")])])]),n("p",[s._v("解决提交前的 conflict，协同工作必备")]),s._v(" "),n("div",{pre:!0,attrs:{class:"pre-wrapper","data-lang":"shell"}},[n("pre",{attrs:{class:"language-shell"}},[n("code",{attrs:{class:"language-shell"}},[s._v("// 先不提交修改的内容直接创建新分支 temp ，若已 commit 则创建新分支后在本分支 reset 到上一个 commit ,再执行 "),n("span",{attrs:{class:"token function"}},[s._v("git")]),s._v(" pull\n\n$ "),n("span",{attrs:{class:"token function"}},[s._v("git")]),s._v(" checkout -b temp\n\n$ "),n("span",{attrs:{class:"token function"}},[s._v("git")]),s._v(" add "),n("span",{attrs:{class:"token keyword"}},[s._v(".")]),s._v("\n\n$ "),n("span",{attrs:{class:"token function"}},[s._v("git")]),s._v(" commit -m "),n("span",{attrs:{class:"token string"}},[s._v("'commit message'")]),s._v("\n\n// 此时的master 分支是干净的，无自己的提交\n$ "),n("span",{attrs:{class:"token function"}},[s._v("git")]),s._v(" checkout master\n\n// 拉取远程修改\n$ "),n("span",{attrs:{class:"token function"}},[s._v("git")]),s._v(" pull\n\n// 复制刚刚提交的 commit-id  commit-a, 将自己的提交 cherry-pick 进去\n$ "),n("span",{attrs:{class:"token function"}},[s._v("git")]),s._v(" cherry-pick commit-a\n\n// 如果有冲突 fix it\n$ "),n("span",{attrs:{class:"token function"}},[s._v("git")]),s._v(" add "),n("span",{attrs:{class:"token keyword"}},[s._v(".")]),s._v("\n\n$ "),n("span",{attrs:{class:"token function"}},[s._v("git")]),s._v(" cherry-pick --continue\n\n// "),n("span",{attrs:{class:"token keyword"}},[s._v("then")]),s._v(" push\n$ "),n("span",{attrs:{class:"token function"}},[s._v("git")]),s._v(" push")])])]),n("p",[s._v("git 删除远程仓库的某次错误提交")]),s._v(" "),n("div",{pre:!0,attrs:{class:"pre-wrapper","data-lang":"shell"}},[n("pre",{attrs:{class:"language-shell"}},[n("code",{attrs:{class:"language-shell"}},[s._v("$ "),n("span",{attrs:{class:"token function"}},[s._v("git")]),s._v(" reset --hard HEAD~1\n\n$ "),n("span",{attrs:{class:"token function"}},[s._v("git")]),s._v(" push --force\n// "),n("span",{attrs:{class:"token function"}},[s._v("git")]),s._v(" push -f\n\n// 强制推送到远程仓库，远程仓库里的错误提交也会消失")])])]),n("ul",[n("li",[s._v("需注意，其实这种方法仅适用于删除最新的一次提交，如果某次错误提交后又有了一个新的提交，则强制删除错误提交会导致后面的提交也消失，因此需慎用此方法，尤其是在多人协作项目上(°ー°〃)")])]),s._v(" "),n("p",[s._v("gerrit merge 前执行 git commit --amend 改写上次提交，并将 gerrit 上的 changeid 加入到上次提交的 commit message 下面（上下各空一行），再 git push（还是原来的 commit，不产生新的提交）")]),s._v(" "),n("p",[s._v("bash ctrl＋R 快速查看输入过的命令")]),s._v(" "),n("p",[s._v("git 创建仓库并关联到 github")]),s._v(" "),n("div",{pre:!0,attrs:{class:"pre-wrapper","data-lang":"bash"}},[n("pre",{attrs:{class:"language-bash"}},[n("code",{attrs:{class:"language-bash"}},[s._v("* "),n("span",{attrs:{class:"token function"}},[s._v("cd")]),s._v(" 到项目目录，git init 初始化，使 "),n("span",{attrs:{class:"token function"}},[s._v("git")]),s._v(" 对此项目进行版本控制\n  * "),n("span",{attrs:{class:"token function"}},[s._v("git")]),s._v(" add "),n("span",{attrs:{class:"token keyword"}},[s._v(".")]),s._v("\n  * "),n("span",{attrs:{class:"token function"}},[s._v("git")]),s._v(" commit -m "),n("span",{attrs:{class:"token string"}},[s._v("''")]),s._v("\n  * 在 github 上创建一个新仓库 create a new repository\n  * 将本地项目关联到建立的新仓库上 "),n("span",{attrs:{class:"token function"}},[s._v("git")]),s._v(" remote add origin "),n("span",{attrs:{class:"token punctuation"}},[s._v("{")]),n("span",{attrs:{class:"token punctuation"}},[s._v("{")]),s._v("url"),n("span",{attrs:{class:"token punctuation"}},[s._v("}")]),n("span",{attrs:{class:"token punctuation"}},[s._v("}")]),s._v("\n  * 运行 $ "),n("span",{attrs:{class:"token function"}},[s._v("git")]),s._v(" remote -v 查看 origin 关联\n  * "),n("span",{attrs:{class:"token function"}},[s._v("git")]),s._v(" push -u origin master\n  * 若本地已有代码非空, 则直接 "),n("span",{attrs:{class:"token function"}},[s._v("git")]),s._v(" remote add origin "),n("span",{attrs:{class:"token punctuation"}},[s._v("{")]),n("span",{attrs:{class:"token punctuation"}},[s._v("{")]),s._v("url"),n("span",{attrs:{class:"token punctuation"}},[s._v("}")]),n("span",{attrs:{class:"token punctuation"}},[s._v("}")]),s._v("\n  * "),n("span",{attrs:{class:"token function"}},[s._v("git")]),s._v(" push -u origin master\n  * 若将一个 "),n("span",{attrs:{class:"token function"}},[s._v("git")]),s._v(" 仓库关联为另一个 "),n("span",{attrs:{class:"token function"}},[s._v("git")]),s._v(" 仓库,则 "),n("span",{attrs:{class:"token function"}},[s._v("ls")]),s._v(" -a 删除 .git/ 文件夹即可\n    删除 "),n("span",{attrs:{class:"token function"}},[s._v("git")]),s._v(" 版本控制, 然后再执行 remote")])])]),n("p",[s._v("Github Pages 发布静态页面")]),s._v(" "),n("ul",[n("li",[s._v("repository-Settings-Github Pages-select a source and save")])])])])};t._withStripped=!0;var e=n(1),p=function(s){const a="wrap-page-2017-01-29-git",n={slug:"git",permalink:"/2017/01/29/git",attributes:{title:"记在小本本上的 git 操作",date:"2017-01-29T00:00:00.000Z",tags:["code"],type:"post",layout:"post"},body:'<p>标签： git</p>\n<p>查看 git 配置信息</p>\n<div class="pre-wrapper" v-pre="" data-lang="git"><pre class="language-git"><code class="language-git"><span class="token command">$ git config<span class="token parameter"> --list</span></span>\nor\n<span class="token command">$ git config<span class="token parameter"> -l</span></span></code></pre></div><p>设置 git 配置信息 \x3c!--more--\x3e</p>\n<ul>\n<li>全局设置</li>\n</ul>\n<div class="pre-wrapper" v-pre="" data-lang="shell"><pre class="language-shell"><code class="language-shell">$ <span class="token function">git</span> config --global user.name <span class="token string">"{{userName}}"</span>\n$ <span class="token function">git</span> config --global user.email <span class="token string">"{{userEmail}}"</span></code></pre></div><ul>\n<li>修改当前项目的 git 配置信息</li>\n</ul>\n<div class="pre-wrapper" v-pre="" data-lang="shell"><pre class="language-shell"><code class="language-shell">$ <span class="token function">ls</span> -a\n$ <span class="token function">cd</span> .git/\n$ <span class="token function">vi</span> config\nadd\n<span class="token punctuation">[</span>user<span class="token punctuation">]</span>\n   name <span class="token operator">=</span> <span class="token punctuation">{</span><span class="token punctuation">{</span>userName<span class="token punctuation">}</span><span class="token punctuation">}</span>\n   email <span class="token operator">=</span> <span class="token punctuation">{</span><span class="token punctuation">{</span>userEmail<span class="token punctuation">}</span><span class="token punctuation">}</span>\n\nor\n$ <span class="token function">git</span> config user.name <span class="token string">"{{userName}}"</span>\n$ <span class="token function">git</span> config user.email <span class="token string">"{{userEmail}}"</span></code></pre></div><p>查看分支</p>\n<div class="pre-wrapper" v-pre="" data-lang="shell"><pre class="language-shell"><code class="language-shell">$ <span class="token function">git</span> branch 查看本地分支\n$ <span class="token function">git</span> branch -r 查看远程分支\n$ <span class="token function">git</span> branch -a 查看所有分支</code></pre></div><p>创建一个新分支</p>\n<div class="pre-wrapper" v-pre="" data-lang="shell"><pre class="language-shell"><code class="language-shell">$ <span class="token function">git</span> checkout -b <span class="token punctuation">{</span><span class="token punctuation">{</span>branch<span class="token punctuation">}</span><span class="token punctuation">}</span></code></pre></div><p>切换分支</p>\n<div class="pre-wrapper" v-pre="" data-lang="shell"><pre class="language-shell"><code class="language-shell">$ <span class="token function">git</span> checkout <span class="token punctuation">{</span><span class="token punctuation">{</span>branch<span class="token punctuation">}</span><span class="token punctuation">}</span>\n\n$ <span class="token function">git</span> checkout -b <span class="token punctuation">{</span><span class="token punctuation">{</span>remoteBranch<span class="token punctuation">}</span><span class="token punctuation">}</span> origin/<span class="token punctuation">{</span><span class="token punctuation">{</span>remoteBranch<span class="token punctuation">}</span><span class="token punctuation">}</span></code></pre></div><p>删除分支</p>\n<div class="pre-wrapper" v-pre="" data-lang="shell"><pre class="language-shell"><code class="language-shell">$ <span class="token function">git</span> branch -D <span class="token punctuation">{</span><span class="token punctuation">{</span>loaclBranch<span class="token punctuation">}</span><span class="token punctuation">}</span>\n$ <span class="token function">git</span> push --delete origin <span class="token punctuation">{</span><span class="token punctuation">{</span>remoteBranch<span class="token punctuation">}</span><span class="token punctuation">}</span></code></pre></div><p>合并分支</p>\n<div class="pre-wrapper" v-pre="" data-lang=""><pre class=""><code class="">$ git merge {{branch}} 将 branch 与当前分支合并</code></pre></div><p>储藏修改</p>\n<div class="pre-wrapper" v-pre="" data-lang="shell"><pre class="language-shell"><code class="language-shell">$ <span class="token function">git</span> stash 当你想切换到其他分支又不想提交现在修改的东西时，当你在修改好前想 <span class="token function">git</span> pull 时，用 <span class="token function">git</span> stash 来得到一个干净的工作目录\n\n$ <span class="token function">git</span> stash save <span class="token string">\'\'</span> 给你的 stash 取个名字\n\n$ <span class="token function">git</span> stash pop 重新应用储藏内容\n\n$ <span class="token function">git</span> stash list 查看现有储藏列表\n\n$ <span class="token function">git</span> stash apply stash@<span class="token punctuation">{</span>number<span class="token punctuation">}</span> 应用某次储藏，但未从栈上移除，需继续 <span class="token function">git</span> stash drop stash@<span class="token punctuation">{</span>number<span class="token punctuation">}</span> <span class="token punctuation">(</span>I like pop<span class="token operator">!</span></code></pre></div><p>查看提交历史</p>\n<div class="pre-wrapper" v-pre="" data-lang="shell"><pre class="language-shell"><code class="language-shell">$ <span class="token function">git</span> log\n\n$ <span class="token function">git</span> log -p  查看每次提交的内容差异\n\n$ <span class="token function">git</span> log -p -2 显示最近的两次更新</code></pre></div><p>查看 commit head message</p>\n<div class="pre-wrapper" v-pre="" data-lang="shell"><pre class="language-shell"><code class="language-shell">$ <span class="token function">git</span> reflog</code></pre></div><p>打 tag</p>\n<div class="pre-wrapper" v-pre="" data-lang="shell"><pre class="language-shell"><code class="language-shell">$ <span class="token function">git</span> tag <span class="token punctuation">{</span><span class="token punctuation">{</span>tagName<span class="token punctuation">}</span><span class="token punctuation">}</span>\n$ <span class="token function">git</span> push origin <span class="token punctuation">{</span><span class="token punctuation">{</span>tagName<span class="token punctuation">}</span><span class="token punctuation">}</span>\nor\n$ <span class="token function">git</span> push --tags</code></pre></div><p>删除 tag</p>\n<div class="pre-wrapper" v-pre="" data-lang="shell"><pre class="language-shell"><code class="language-shell">$ <span class="token function">git</span> tag -d <span class="token punctuation">{</span><span class="token punctuation">{</span>localTag<span class="token punctuation">}</span><span class="token punctuation">}</span>\n\n$ <span class="token function">git</span> tag -d <span class="token punctuation">{</span><span class="token punctuation">{</span>remoteTag<span class="token punctuation">}</span><span class="token punctuation">}</span>\n$ <span class="token function">git</span> push origin :refs/tags/<span class="token punctuation">{</span><span class="token punctuation">{</span>remoteTag<span class="token punctuation">}</span><span class="token punctuation">}</span></code></pre></div><p>给一个历史提交添加 tag</p>\n<div class="pre-wrapper" v-pre="" data-lang="shell"><pre class="language-shell"><code class="language-shell">// Set the HEAD to the old commit that we want to tag\n$ <span class="token function">git</span> checkout <span class="token punctuation">{</span><span class="token punctuation">{</span>leading 7 chars of commit<span class="token punctuation">}</span><span class="token punctuation">}</span>\n\n// temporarily <span class="token keyword">set</span> the <span class="token function">date</span> to the <span class="token function">date</span> of the HEAD commit, and add the tag\n$ GIT_COMMITTER_DATE<span class="token operator">=</span><span class="token string">"<span class="token variable"><span class="token variable">$(</span><span class="token function">git</span> show --format<span class="token operator">=</span>%aD <span class="token operator">|</span> <span class="token function">head</span> -1<span class="token variable">)</span></span>"</span> <span class="token function">git</span> tag -a <span class="token punctuation">{</span><span class="token punctuation">{</span>tag<span class="token punctuation">}</span><span class="token punctuation">}</span> -m <span class="token string">"{{commit message}}"</span>\n\n// <span class="token keyword">set</span> HEAD back to whatever you want it to be\n$ <span class="token function">git</span> checkout master\n\n$ <span class="token function">git</span> push --tags</code></pre></div><p>push 后发现没加 .gitignore，删除本地及远程的冗余提交</p>\n<div class="pre-wrapper" v-pre="" data-lang="shell"><pre class="language-shell"><code class="language-shell">$ <span class="token function">git</span> <span class="token function">rm</span> -r --cached <span class="token keyword">.</span>\n$ <span class="token function">git</span> add <span class="token keyword">.</span>\n$ <span class="token function">git</span> commit -m <span class="token string">"{{commit message}}"</span>\n$ <span class="token function">git</span> push</code></pre></div><p>修改已经 commit 的邮箱和用户名</p>\n<div class="pre-wrapper" v-pre="" data-lang="shell"><pre class="language-shell"><code class="language-shell">// get the commit we want to modify\n$ <span class="token function">git</span> log\n\n// go to the commit\n$ <span class="token function">git</span> reset --soft <span class="token punctuation">{</span><span class="token punctuation">{</span>commitId<span class="token punctuation">}</span><span class="token punctuation">}</span>\n\n$ <span class="token function">git</span> commit --amend --author<span class="token operator">=</span><span class="token string">\'{{userName}}&lt;{{userEmail}}>\'</span>\n$ <span class="token function">git</span> push</code></pre></div><p>修改已经 push 的 commit 的邮箱和用户名</p>\n<div class="pre-wrapper" v-pre="" data-lang="shell"><pre class="language-shell"><code class="language-shell">// clone a new repo\n<span class="token function">git</span> clone --bare https://github.com/user/repo.git\n<span class="token function">cd</span> repo.git</code></pre></div><div class="pre-wrapper" v-pre="" data-lang="shell"><pre class="language-shell"><code class="language-shell">// copy the script below and modify the variables: OLD_EMAIL, CORRECT_NAME, CORRECT_EMAIL\n\n<span class="token comment">#! /bin/sh</span>\n\n<span class="token function">git</span> filter-branch --env-filter <span class="token string">\'\n\nOLD_EMAIL=""\nCORRECT_NAME="Your Correct Name"\nCORRECT_EMAIL="your-correct-email@example.com"\n\nif [ "<span class="token variable">$GIT_COMMITTER_EMAIL</span>" = "<span class="token variable">$OLD_EMAIL</span>" ]\nthen\n    export GIT_COMMITTER_NAME="<span class="token variable">$CORRECT_NAME</span>"\n    export GIT_COMMITTER_EMAIL="<span class="token variable">$CORRECT_EMAIL</span>"\nfi\nif [ "<span class="token variable">$GIT_AUTHOR_EMAIL</span>" = "<span class="token variable">$OLD_EMAIL</span>" ]\nthen\n    export GIT_AUTHOR_NAME="<span class="token variable">$CORRECT_NAME</span>"\n    export GIT_AUTHOR_EMAIL="<span class="token variable">$CORRECT_EMAIL</span>"\nfi\n\'</span> --tag-name-filter <span class="token function">cat</span> -- --branches --tags</code></pre></div><div class="pre-wrapper" v-pre="" data-lang="shell"><pre class="language-shell"><code class="language-shell">// <span class="token keyword">then</span> press enter to run the script\n\n// checkout <span class="token keyword">if</span> there any error <span class="token keyword">in</span> new <span class="token function">git</span> and push\n$ <span class="token function">git</span> push --force --tags origin <span class="token string">\'refs/heads/*\'</span>\n\n// delete the temporary clone\n$ <span class="token function">cd</span> <span class="token punctuation">..</span>\n$ <span class="token function">rm</span> -rf repo.git</code></pre></div><p>修改已经 push 的 commit message</p>\n<div class="pre-wrapper" v-pre="" data-lang="shell"><pre class="language-shell"><code class="language-shell">方法一:\n$ <span class="token function">git</span> commit --amend\n$ <span class="token function">git</span> push --force\n\n方法二:\n$ <span class="token function">git</span> rebase -i HEAD~n\n\nchange the <span class="token variable"><span class="token variable">`</span>pick<span class="token variable">`</span></span> to <span class="token variable"><span class="token variable">`</span>reword<span class="token variable">`</span></span>, <span class="token function">which</span> means edit the commit message\n\nsave and <span class="token keyword">exit</span> and <span class="token keyword">then</span> update the commit message as you like and :wq\n\n$ <span class="token function">git</span> push --f</code></pre></div><p>修改已经 push 的提交内容</p>\n<div class="pre-wrapper" v-pre="" data-lang="shell"><pre class="language-shell"><code class="language-shell"><span class="token function">git</span> reset --hard <span class="token punctuation">{</span><span class="token punctuation">{</span>commitId<span class="token punctuation">}</span><span class="token punctuation">}</span>\n\n<span class="token function">git</span> add <span class="token keyword">.</span>\n\n<span class="token function">git</span> commit --amend\n\n<span class="token function">git</span> push origin HEAD --force</code></pre></div><p>解决提交前的 conflict，协同工作必备</p>\n<div class="pre-wrapper" v-pre="" data-lang="shell"><pre class="language-shell"><code class="language-shell">// 先不提交修改的内容直接创建新分支 temp ，若已 commit 则创建新分支后在本分支 reset 到上一个 commit ,再执行 <span class="token function">git</span> pull\n\n$ <span class="token function">git</span> checkout -b temp\n\n$ <span class="token function">git</span> add <span class="token keyword">.</span>\n\n$ <span class="token function">git</span> commit -m <span class="token string">\'commit message\'</span>\n\n// 此时的master 分支是干净的，无自己的提交\n$ <span class="token function">git</span> checkout master\n\n// 拉取远程修改\n$ <span class="token function">git</span> pull\n\n// 复制刚刚提交的 commit-id  commit-a, 将自己的提交 cherry-pick 进去\n$ <span class="token function">git</span> cherry-pick commit-a\n\n// 如果有冲突 fix it\n$ <span class="token function">git</span> add <span class="token keyword">.</span>\n\n$ <span class="token function">git</span> cherry-pick --continue\n\n// <span class="token keyword">then</span> push\n$ <span class="token function">git</span> push</code></pre></div><p>git 删除远程仓库的某次错误提交</p>\n<div class="pre-wrapper" v-pre="" data-lang="shell"><pre class="language-shell"><code class="language-shell">$ <span class="token function">git</span> reset --hard HEAD~1\n\n$ <span class="token function">git</span> push --force\n// <span class="token function">git</span> push -f\n\n// 强制推送到远程仓库，远程仓库里的错误提交也会消失</code></pre></div><ul>\n<li>需注意，其实这种方法仅适用于删除最新的一次提交，如果某次错误提交后又有了一个新的提交，则强制删除错误提交会导致后面的提交也消失，因此需慎用此方法，尤其是在多人协作项目上(°ー°〃)</li>\n</ul>\n<p>gerrit merge 前执行 git commit --amend 改写上次提交，并将 gerrit 上的 changeid 加入到上次提交的 commit message 下面（上下各空一行），再 git push（还是原来的 commit，不产生新的提交）</p>\n<p>bash ctrl＋R 快速查看输入过的命令</p>\n<p>git 创建仓库并关联到 github</p>\n<div class="pre-wrapper" v-pre="" data-lang="bash"><pre class="language-bash"><code class="language-bash">* <span class="token function">cd</span> 到项目目录，git init 初始化，使 <span class="token function">git</span> 对此项目进行版本控制\n  * <span class="token function">git</span> add <span class="token keyword">.</span>\n  * <span class="token function">git</span> commit -m <span class="token string">\'\'</span>\n  * 在 github 上创建一个新仓库 create a new repository\n  * 将本地项目关联到建立的新仓库上 <span class="token function">git</span> remote add origin <span class="token punctuation">{</span><span class="token punctuation">{</span>url<span class="token punctuation">}</span><span class="token punctuation">}</span>\n  * 运行 $ <span class="token function">git</span> remote -v 查看 origin 关联\n  * <span class="token function">git</span> push -u origin master\n  * 若本地已有代码非空, 则直接 <span class="token function">git</span> remote add origin <span class="token punctuation">{</span><span class="token punctuation">{</span>url<span class="token punctuation">}</span><span class="token punctuation">}</span>\n  * <span class="token function">git</span> push -u origin master\n  * 若将一个 <span class="token function">git</span> 仓库关联为另一个 <span class="token function">git</span> 仓库,则 <span class="token function">ls</span> -a 删除 .git/ 文件夹即可\n    删除 <span class="token function">git</span> 版本控制, 然后再执行 remote</code></pre></div><p>Github Pages 发布静态页面</p>\n<ul>\n<li>repository-Settings-Github Pages-select a source and save</li>\n</ul>\n',excerpt:"<p>标签： git</p>\n"};s.options.name=a,s.options.computed=Object.assign({},s.options.computed,{$page:()=>n})},c=Object(e.a)({},t,[],!1,null,null,null);"function"==typeof p&&p(c),c.options.__file=".peco/data/_posts/git.md.peson";a.default=c.exports}}]);